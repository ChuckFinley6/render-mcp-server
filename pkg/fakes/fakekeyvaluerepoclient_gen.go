// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/render-oss/render-mcp-server/pkg/client"
)

type FakeKeyValueRepoClient struct {
	CreateKeyValueWithResponseStub        func(context.Context, client.KeyValuePOSTInput, ...client.RequestEditorFn) (*client.CreateKeyValueResponse, error)
	createKeyValueWithResponseMutex       sync.RWMutex
	createKeyValueWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 client.KeyValuePOSTInput
		arg3 []client.RequestEditorFn
	}
	createKeyValueWithResponseReturns struct {
		result1 *client.CreateKeyValueResponse
		result2 error
	}
	createKeyValueWithResponseReturnsOnCall map[int]struct {
		result1 *client.CreateKeyValueResponse
		result2 error
	}
	ListKeyValueWithResponseStub        func(context.Context, *client.ListKeyValueParams, ...client.RequestEditorFn) (*client.ListKeyValueResponse, error)
	listKeyValueWithResponseMutex       sync.RWMutex
	listKeyValueWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 *client.ListKeyValueParams
		arg3 []client.RequestEditorFn
	}
	listKeyValueWithResponseReturns struct {
		result1 *client.ListKeyValueResponse
		result2 error
	}
	listKeyValueWithResponseReturnsOnCall map[int]struct {
		result1 *client.ListKeyValueResponse
		result2 error
	}
	RetrieveKeyValueConnectionInfoWithResponseStub        func(context.Context, string, ...client.RequestEditorFn) (*client.RetrieveKeyValueConnectionInfoResponse, error)
	retrieveKeyValueConnectionInfoWithResponseMutex       sync.RWMutex
	retrieveKeyValueConnectionInfoWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []client.RequestEditorFn
	}
	retrieveKeyValueConnectionInfoWithResponseReturns struct {
		result1 *client.RetrieveKeyValueConnectionInfoResponse
		result2 error
	}
	retrieveKeyValueConnectionInfoWithResponseReturnsOnCall map[int]struct {
		result1 *client.RetrieveKeyValueConnectionInfoResponse
		result2 error
	}
	RetrieveKeyValueWithResponseStub        func(context.Context, string, ...client.RequestEditorFn) (*client.RetrieveKeyValueResponse, error)
	retrieveKeyValueWithResponseMutex       sync.RWMutex
	retrieveKeyValueWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []client.RequestEditorFn
	}
	retrieveKeyValueWithResponseReturns struct {
		result1 *client.RetrieveKeyValueResponse
		result2 error
	}
	retrieveKeyValueWithResponseReturnsOnCall map[int]struct {
		result1 *client.RetrieveKeyValueResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKeyValueRepoClient) CreateKeyValueWithResponse(arg1 context.Context, arg2 client.KeyValuePOSTInput, arg3 ...client.RequestEditorFn) (*client.CreateKeyValueResponse, error) {
	fake.createKeyValueWithResponseMutex.Lock()
	ret, specificReturn := fake.createKeyValueWithResponseReturnsOnCall[len(fake.createKeyValueWithResponseArgsForCall)]
	fake.createKeyValueWithResponseArgsForCall = append(fake.createKeyValueWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 client.KeyValuePOSTInput
		arg3 []client.RequestEditorFn
	}{arg1, arg2, arg3})
	stub := fake.CreateKeyValueWithResponseStub
	fakeReturns := fake.createKeyValueWithResponseReturns
	fake.recordInvocation("CreateKeyValueWithResponse", []interface{}{arg1, arg2, arg3})
	fake.createKeyValueWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKeyValueRepoClient) CreateKeyValueWithResponseCallCount() int {
	fake.createKeyValueWithResponseMutex.RLock()
	defer fake.createKeyValueWithResponseMutex.RUnlock()
	return len(fake.createKeyValueWithResponseArgsForCall)
}

func (fake *FakeKeyValueRepoClient) CreateKeyValueWithResponseCalls(stub func(context.Context, client.KeyValuePOSTInput, ...client.RequestEditorFn) (*client.CreateKeyValueResponse, error)) {
	fake.createKeyValueWithResponseMutex.Lock()
	defer fake.createKeyValueWithResponseMutex.Unlock()
	fake.CreateKeyValueWithResponseStub = stub
}

func (fake *FakeKeyValueRepoClient) CreateKeyValueWithResponseArgsForCall(i int) (context.Context, client.KeyValuePOSTInput, []client.RequestEditorFn) {
	fake.createKeyValueWithResponseMutex.RLock()
	defer fake.createKeyValueWithResponseMutex.RUnlock()
	argsForCall := fake.createKeyValueWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKeyValueRepoClient) CreateKeyValueWithResponseReturns(result1 *client.CreateKeyValueResponse, result2 error) {
	fake.createKeyValueWithResponseMutex.Lock()
	defer fake.createKeyValueWithResponseMutex.Unlock()
	fake.CreateKeyValueWithResponseStub = nil
	fake.createKeyValueWithResponseReturns = struct {
		result1 *client.CreateKeyValueResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) CreateKeyValueWithResponseReturnsOnCall(i int, result1 *client.CreateKeyValueResponse, result2 error) {
	fake.createKeyValueWithResponseMutex.Lock()
	defer fake.createKeyValueWithResponseMutex.Unlock()
	fake.CreateKeyValueWithResponseStub = nil
	if fake.createKeyValueWithResponseReturnsOnCall == nil {
		fake.createKeyValueWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.CreateKeyValueResponse
			result2 error
		})
	}
	fake.createKeyValueWithResponseReturnsOnCall[i] = struct {
		result1 *client.CreateKeyValueResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) ListKeyValueWithResponse(arg1 context.Context, arg2 *client.ListKeyValueParams, arg3 ...client.RequestEditorFn) (*client.ListKeyValueResponse, error) {
	fake.listKeyValueWithResponseMutex.Lock()
	ret, specificReturn := fake.listKeyValueWithResponseReturnsOnCall[len(fake.listKeyValueWithResponseArgsForCall)]
	fake.listKeyValueWithResponseArgsForCall = append(fake.listKeyValueWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 *client.ListKeyValueParams
		arg3 []client.RequestEditorFn
	}{arg1, arg2, arg3})
	stub := fake.ListKeyValueWithResponseStub
	fakeReturns := fake.listKeyValueWithResponseReturns
	fake.recordInvocation("ListKeyValueWithResponse", []interface{}{arg1, arg2, arg3})
	fake.listKeyValueWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKeyValueRepoClient) ListKeyValueWithResponseCallCount() int {
	fake.listKeyValueWithResponseMutex.RLock()
	defer fake.listKeyValueWithResponseMutex.RUnlock()
	return len(fake.listKeyValueWithResponseArgsForCall)
}

func (fake *FakeKeyValueRepoClient) ListKeyValueWithResponseCalls(stub func(context.Context, *client.ListKeyValueParams, ...client.RequestEditorFn) (*client.ListKeyValueResponse, error)) {
	fake.listKeyValueWithResponseMutex.Lock()
	defer fake.listKeyValueWithResponseMutex.Unlock()
	fake.ListKeyValueWithResponseStub = stub
}

func (fake *FakeKeyValueRepoClient) ListKeyValueWithResponseArgsForCall(i int) (context.Context, *client.ListKeyValueParams, []client.RequestEditorFn) {
	fake.listKeyValueWithResponseMutex.RLock()
	defer fake.listKeyValueWithResponseMutex.RUnlock()
	argsForCall := fake.listKeyValueWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKeyValueRepoClient) ListKeyValueWithResponseReturns(result1 *client.ListKeyValueResponse, result2 error) {
	fake.listKeyValueWithResponseMutex.Lock()
	defer fake.listKeyValueWithResponseMutex.Unlock()
	fake.ListKeyValueWithResponseStub = nil
	fake.listKeyValueWithResponseReturns = struct {
		result1 *client.ListKeyValueResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) ListKeyValueWithResponseReturnsOnCall(i int, result1 *client.ListKeyValueResponse, result2 error) {
	fake.listKeyValueWithResponseMutex.Lock()
	defer fake.listKeyValueWithResponseMutex.Unlock()
	fake.ListKeyValueWithResponseStub = nil
	if fake.listKeyValueWithResponseReturnsOnCall == nil {
		fake.listKeyValueWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.ListKeyValueResponse
			result2 error
		})
	}
	fake.listKeyValueWithResponseReturnsOnCall[i] = struct {
		result1 *client.ListKeyValueResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueConnectionInfoWithResponse(arg1 context.Context, arg2 string, arg3 ...client.RequestEditorFn) (*client.RetrieveKeyValueConnectionInfoResponse, error) {
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.Lock()
	ret, specificReturn := fake.retrieveKeyValueConnectionInfoWithResponseReturnsOnCall[len(fake.retrieveKeyValueConnectionInfoWithResponseArgsForCall)]
	fake.retrieveKeyValueConnectionInfoWithResponseArgsForCall = append(fake.retrieveKeyValueConnectionInfoWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []client.RequestEditorFn
	}{arg1, arg2, arg3})
	stub := fake.RetrieveKeyValueConnectionInfoWithResponseStub
	fakeReturns := fake.retrieveKeyValueConnectionInfoWithResponseReturns
	fake.recordInvocation("RetrieveKeyValueConnectionInfoWithResponse", []interface{}{arg1, arg2, arg3})
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueConnectionInfoWithResponseCallCount() int {
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.RLock()
	defer fake.retrieveKeyValueConnectionInfoWithResponseMutex.RUnlock()
	return len(fake.retrieveKeyValueConnectionInfoWithResponseArgsForCall)
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueConnectionInfoWithResponseCalls(stub func(context.Context, string, ...client.RequestEditorFn) (*client.RetrieveKeyValueConnectionInfoResponse, error)) {
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.Lock()
	defer fake.retrieveKeyValueConnectionInfoWithResponseMutex.Unlock()
	fake.RetrieveKeyValueConnectionInfoWithResponseStub = stub
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueConnectionInfoWithResponseArgsForCall(i int) (context.Context, string, []client.RequestEditorFn) {
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.RLock()
	defer fake.retrieveKeyValueConnectionInfoWithResponseMutex.RUnlock()
	argsForCall := fake.retrieveKeyValueConnectionInfoWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueConnectionInfoWithResponseReturns(result1 *client.RetrieveKeyValueConnectionInfoResponse, result2 error) {
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.Lock()
	defer fake.retrieveKeyValueConnectionInfoWithResponseMutex.Unlock()
	fake.RetrieveKeyValueConnectionInfoWithResponseStub = nil
	fake.retrieveKeyValueConnectionInfoWithResponseReturns = struct {
		result1 *client.RetrieveKeyValueConnectionInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueConnectionInfoWithResponseReturnsOnCall(i int, result1 *client.RetrieveKeyValueConnectionInfoResponse, result2 error) {
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.Lock()
	defer fake.retrieveKeyValueConnectionInfoWithResponseMutex.Unlock()
	fake.RetrieveKeyValueConnectionInfoWithResponseStub = nil
	if fake.retrieveKeyValueConnectionInfoWithResponseReturnsOnCall == nil {
		fake.retrieveKeyValueConnectionInfoWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.RetrieveKeyValueConnectionInfoResponse
			result2 error
		})
	}
	fake.retrieveKeyValueConnectionInfoWithResponseReturnsOnCall[i] = struct {
		result1 *client.RetrieveKeyValueConnectionInfoResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueWithResponse(arg1 context.Context, arg2 string, arg3 ...client.RequestEditorFn) (*client.RetrieveKeyValueResponse, error) {
	fake.retrieveKeyValueWithResponseMutex.Lock()
	ret, specificReturn := fake.retrieveKeyValueWithResponseReturnsOnCall[len(fake.retrieveKeyValueWithResponseArgsForCall)]
	fake.retrieveKeyValueWithResponseArgsForCall = append(fake.retrieveKeyValueWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []client.RequestEditorFn
	}{arg1, arg2, arg3})
	stub := fake.RetrieveKeyValueWithResponseStub
	fakeReturns := fake.retrieveKeyValueWithResponseReturns
	fake.recordInvocation("RetrieveKeyValueWithResponse", []interface{}{arg1, arg2, arg3})
	fake.retrieveKeyValueWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueWithResponseCallCount() int {
	fake.retrieveKeyValueWithResponseMutex.RLock()
	defer fake.retrieveKeyValueWithResponseMutex.RUnlock()
	return len(fake.retrieveKeyValueWithResponseArgsForCall)
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueWithResponseCalls(stub func(context.Context, string, ...client.RequestEditorFn) (*client.RetrieveKeyValueResponse, error)) {
	fake.retrieveKeyValueWithResponseMutex.Lock()
	defer fake.retrieveKeyValueWithResponseMutex.Unlock()
	fake.RetrieveKeyValueWithResponseStub = stub
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueWithResponseArgsForCall(i int) (context.Context, string, []client.RequestEditorFn) {
	fake.retrieveKeyValueWithResponseMutex.RLock()
	defer fake.retrieveKeyValueWithResponseMutex.RUnlock()
	argsForCall := fake.retrieveKeyValueWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueWithResponseReturns(result1 *client.RetrieveKeyValueResponse, result2 error) {
	fake.retrieveKeyValueWithResponseMutex.Lock()
	defer fake.retrieveKeyValueWithResponseMutex.Unlock()
	fake.RetrieveKeyValueWithResponseStub = nil
	fake.retrieveKeyValueWithResponseReturns = struct {
		result1 *client.RetrieveKeyValueResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) RetrieveKeyValueWithResponseReturnsOnCall(i int, result1 *client.RetrieveKeyValueResponse, result2 error) {
	fake.retrieveKeyValueWithResponseMutex.Lock()
	defer fake.retrieveKeyValueWithResponseMutex.Unlock()
	fake.RetrieveKeyValueWithResponseStub = nil
	if fake.retrieveKeyValueWithResponseReturnsOnCall == nil {
		fake.retrieveKeyValueWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.RetrieveKeyValueResponse
			result2 error
		})
	}
	fake.retrieveKeyValueWithResponseReturnsOnCall[i] = struct {
		result1 *client.RetrieveKeyValueResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeKeyValueRepoClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createKeyValueWithResponseMutex.RLock()
	defer fake.createKeyValueWithResponseMutex.RUnlock()
	fake.listKeyValueWithResponseMutex.RLock()
	defer fake.listKeyValueWithResponseMutex.RUnlock()
	fake.retrieveKeyValueConnectionInfoWithResponseMutex.RLock()
	defer fake.retrieveKeyValueConnectionInfoWithResponseMutex.RUnlock()
	fake.retrieveKeyValueWithResponseMutex.RLock()
	defer fake.retrieveKeyValueWithResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKeyValueRepoClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
