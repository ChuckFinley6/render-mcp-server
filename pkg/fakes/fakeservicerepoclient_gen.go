// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/render-oss/render-mcp-server/pkg/client"
)

type FakeServiceRepoClient struct {
	CreateDeployWithResponseStub        func(context.Context, string, client.CreateDeployJSONRequestBody, ...client.RequestEditorFn) (*client.CreateDeployResponse, error)
	createDeployWithResponseMutex       sync.RWMutex
	createDeployWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 client.CreateDeployJSONRequestBody
		arg4 []client.RequestEditorFn
	}
	createDeployWithResponseReturns struct {
		result1 *client.CreateDeployResponse
		result2 error
	}
	createDeployWithResponseReturnsOnCall map[int]struct {
		result1 *client.CreateDeployResponse
		result2 error
	}
	CreateServiceWithResponseStub        func(context.Context, client.CreateServiceJSONRequestBody, ...client.RequestEditorFn) (*client.CreateServiceResponse, error)
	createServiceWithResponseMutex       sync.RWMutex
	createServiceWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 client.CreateServiceJSONRequestBody
		arg3 []client.RequestEditorFn
	}
	createServiceWithResponseReturns struct {
		result1 *client.CreateServiceResponse
		result2 error
	}
	createServiceWithResponseReturnsOnCall map[int]struct {
		result1 *client.CreateServiceResponse
		result2 error
	}
	GetEnvVarsForServiceWithResponseStub        func(context.Context, string, *client.GetEnvVarsForServiceParams, ...client.RequestEditorFn) (*client.GetEnvVarsForServiceResponse, error)
	getEnvVarsForServiceWithResponseMutex       sync.RWMutex
	getEnvVarsForServiceWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *client.GetEnvVarsForServiceParams
		arg4 []client.RequestEditorFn
	}
	getEnvVarsForServiceWithResponseReturns struct {
		result1 *client.GetEnvVarsForServiceResponse
		result2 error
	}
	getEnvVarsForServiceWithResponseReturnsOnCall map[int]struct {
		result1 *client.GetEnvVarsForServiceResponse
		result2 error
	}
	ListServicesWithResponseStub        func(context.Context, *client.ListServicesParams, ...client.RequestEditorFn) (*client.ListServicesResponse, error)
	listServicesWithResponseMutex       sync.RWMutex
	listServicesWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 *client.ListServicesParams
		arg3 []client.RequestEditorFn
	}
	listServicesWithResponseReturns struct {
		result1 *client.ListServicesResponse
		result2 error
	}
	listServicesWithResponseReturnsOnCall map[int]struct {
		result1 *client.ListServicesResponse
		result2 error
	}
	RetrieveServiceWithResponseStub        func(context.Context, string, ...client.RequestEditorFn) (*client.RetrieveServiceResponse, error)
	retrieveServiceWithResponseMutex       sync.RWMutex
	retrieveServiceWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []client.RequestEditorFn
	}
	retrieveServiceWithResponseReturns struct {
		result1 *client.RetrieveServiceResponse
		result2 error
	}
	retrieveServiceWithResponseReturnsOnCall map[int]struct {
		result1 *client.RetrieveServiceResponse
		result2 error
	}
	UpdateEnvVarsForServiceWithResponseStub        func(context.Context, string, []client.EnvVarInput, ...client.RequestEditorFn) (*client.UpdateEnvVarsForServiceResponse, error)
	updateEnvVarsForServiceWithResponseMutex       sync.RWMutex
	updateEnvVarsForServiceWithResponseArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []client.EnvVarInput
		arg4 []client.RequestEditorFn
	}
	updateEnvVarsForServiceWithResponseReturns struct {
		result1 *client.UpdateEnvVarsForServiceResponse
		result2 error
	}
	updateEnvVarsForServiceWithResponseReturnsOnCall map[int]struct {
		result1 *client.UpdateEnvVarsForServiceResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceRepoClient) CreateDeployWithResponse(arg1 context.Context, arg2 string, arg3 client.CreateDeployJSONRequestBody, arg4 ...client.RequestEditorFn) (*client.CreateDeployResponse, error) {
	fake.createDeployWithResponseMutex.Lock()
	ret, specificReturn := fake.createDeployWithResponseReturnsOnCall[len(fake.createDeployWithResponseArgsForCall)]
	fake.createDeployWithResponseArgsForCall = append(fake.createDeployWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 client.CreateDeployJSONRequestBody
		arg4 []client.RequestEditorFn
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateDeployWithResponseStub
	fakeReturns := fake.createDeployWithResponseReturns
	fake.recordInvocation("CreateDeployWithResponse", []interface{}{arg1, arg2, arg3, arg4})
	fake.createDeployWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceRepoClient) CreateDeployWithResponseCallCount() int {
	fake.createDeployWithResponseMutex.RLock()
	defer fake.createDeployWithResponseMutex.RUnlock()
	return len(fake.createDeployWithResponseArgsForCall)
}

func (fake *FakeServiceRepoClient) CreateDeployWithResponseCalls(stub func(context.Context, string, client.CreateDeployJSONRequestBody, ...client.RequestEditorFn) (*client.CreateDeployResponse, error)) {
	fake.createDeployWithResponseMutex.Lock()
	defer fake.createDeployWithResponseMutex.Unlock()
	fake.CreateDeployWithResponseStub = stub
}

func (fake *FakeServiceRepoClient) CreateDeployWithResponseArgsForCall(i int) (context.Context, string, client.CreateDeployJSONRequestBody, []client.RequestEditorFn) {
	fake.createDeployWithResponseMutex.RLock()
	defer fake.createDeployWithResponseMutex.RUnlock()
	argsForCall := fake.createDeployWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceRepoClient) CreateDeployWithResponseReturns(result1 *client.CreateDeployResponse, result2 error) {
	fake.createDeployWithResponseMutex.Lock()
	defer fake.createDeployWithResponseMutex.Unlock()
	fake.CreateDeployWithResponseStub = nil
	fake.createDeployWithResponseReturns = struct {
		result1 *client.CreateDeployResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) CreateDeployWithResponseReturnsOnCall(i int, result1 *client.CreateDeployResponse, result2 error) {
	fake.createDeployWithResponseMutex.Lock()
	defer fake.createDeployWithResponseMutex.Unlock()
	fake.CreateDeployWithResponseStub = nil
	if fake.createDeployWithResponseReturnsOnCall == nil {
		fake.createDeployWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.CreateDeployResponse
			result2 error
		})
	}
	fake.createDeployWithResponseReturnsOnCall[i] = struct {
		result1 *client.CreateDeployResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) CreateServiceWithResponse(arg1 context.Context, arg2 client.CreateServiceJSONRequestBody, arg3 ...client.RequestEditorFn) (*client.CreateServiceResponse, error) {
	fake.createServiceWithResponseMutex.Lock()
	ret, specificReturn := fake.createServiceWithResponseReturnsOnCall[len(fake.createServiceWithResponseArgsForCall)]
	fake.createServiceWithResponseArgsForCall = append(fake.createServiceWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 client.CreateServiceJSONRequestBody
		arg3 []client.RequestEditorFn
	}{arg1, arg2, arg3})
	stub := fake.CreateServiceWithResponseStub
	fakeReturns := fake.createServiceWithResponseReturns
	fake.recordInvocation("CreateServiceWithResponse", []interface{}{arg1, arg2, arg3})
	fake.createServiceWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceRepoClient) CreateServiceWithResponseCallCount() int {
	fake.createServiceWithResponseMutex.RLock()
	defer fake.createServiceWithResponseMutex.RUnlock()
	return len(fake.createServiceWithResponseArgsForCall)
}

func (fake *FakeServiceRepoClient) CreateServiceWithResponseCalls(stub func(context.Context, client.CreateServiceJSONRequestBody, ...client.RequestEditorFn) (*client.CreateServiceResponse, error)) {
	fake.createServiceWithResponseMutex.Lock()
	defer fake.createServiceWithResponseMutex.Unlock()
	fake.CreateServiceWithResponseStub = stub
}

func (fake *FakeServiceRepoClient) CreateServiceWithResponseArgsForCall(i int) (context.Context, client.CreateServiceJSONRequestBody, []client.RequestEditorFn) {
	fake.createServiceWithResponseMutex.RLock()
	defer fake.createServiceWithResponseMutex.RUnlock()
	argsForCall := fake.createServiceWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceRepoClient) CreateServiceWithResponseReturns(result1 *client.CreateServiceResponse, result2 error) {
	fake.createServiceWithResponseMutex.Lock()
	defer fake.createServiceWithResponseMutex.Unlock()
	fake.CreateServiceWithResponseStub = nil
	fake.createServiceWithResponseReturns = struct {
		result1 *client.CreateServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) CreateServiceWithResponseReturnsOnCall(i int, result1 *client.CreateServiceResponse, result2 error) {
	fake.createServiceWithResponseMutex.Lock()
	defer fake.createServiceWithResponseMutex.Unlock()
	fake.CreateServiceWithResponseStub = nil
	if fake.createServiceWithResponseReturnsOnCall == nil {
		fake.createServiceWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.CreateServiceResponse
			result2 error
		})
	}
	fake.createServiceWithResponseReturnsOnCall[i] = struct {
		result1 *client.CreateServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) GetEnvVarsForServiceWithResponse(arg1 context.Context, arg2 string, arg3 *client.GetEnvVarsForServiceParams, arg4 ...client.RequestEditorFn) (*client.GetEnvVarsForServiceResponse, error) {
	fake.getEnvVarsForServiceWithResponseMutex.Lock()
	ret, specificReturn := fake.getEnvVarsForServiceWithResponseReturnsOnCall[len(fake.getEnvVarsForServiceWithResponseArgsForCall)]
	fake.getEnvVarsForServiceWithResponseArgsForCall = append(fake.getEnvVarsForServiceWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *client.GetEnvVarsForServiceParams
		arg4 []client.RequestEditorFn
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetEnvVarsForServiceWithResponseStub
	fakeReturns := fake.getEnvVarsForServiceWithResponseReturns
	fake.recordInvocation("GetEnvVarsForServiceWithResponse", []interface{}{arg1, arg2, arg3, arg4})
	fake.getEnvVarsForServiceWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceRepoClient) GetEnvVarsForServiceWithResponseCallCount() int {
	fake.getEnvVarsForServiceWithResponseMutex.RLock()
	defer fake.getEnvVarsForServiceWithResponseMutex.RUnlock()
	return len(fake.getEnvVarsForServiceWithResponseArgsForCall)
}

func (fake *FakeServiceRepoClient) GetEnvVarsForServiceWithResponseCalls(stub func(context.Context, string, *client.GetEnvVarsForServiceParams, ...client.RequestEditorFn) (*client.GetEnvVarsForServiceResponse, error)) {
	fake.getEnvVarsForServiceWithResponseMutex.Lock()
	defer fake.getEnvVarsForServiceWithResponseMutex.Unlock()
	fake.GetEnvVarsForServiceWithResponseStub = stub
}

func (fake *FakeServiceRepoClient) GetEnvVarsForServiceWithResponseArgsForCall(i int) (context.Context, string, *client.GetEnvVarsForServiceParams, []client.RequestEditorFn) {
	fake.getEnvVarsForServiceWithResponseMutex.RLock()
	defer fake.getEnvVarsForServiceWithResponseMutex.RUnlock()
	argsForCall := fake.getEnvVarsForServiceWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceRepoClient) GetEnvVarsForServiceWithResponseReturns(result1 *client.GetEnvVarsForServiceResponse, result2 error) {
	fake.getEnvVarsForServiceWithResponseMutex.Lock()
	defer fake.getEnvVarsForServiceWithResponseMutex.Unlock()
	fake.GetEnvVarsForServiceWithResponseStub = nil
	fake.getEnvVarsForServiceWithResponseReturns = struct {
		result1 *client.GetEnvVarsForServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) GetEnvVarsForServiceWithResponseReturnsOnCall(i int, result1 *client.GetEnvVarsForServiceResponse, result2 error) {
	fake.getEnvVarsForServiceWithResponseMutex.Lock()
	defer fake.getEnvVarsForServiceWithResponseMutex.Unlock()
	fake.GetEnvVarsForServiceWithResponseStub = nil
	if fake.getEnvVarsForServiceWithResponseReturnsOnCall == nil {
		fake.getEnvVarsForServiceWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.GetEnvVarsForServiceResponse
			result2 error
		})
	}
	fake.getEnvVarsForServiceWithResponseReturnsOnCall[i] = struct {
		result1 *client.GetEnvVarsForServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) ListServicesWithResponse(arg1 context.Context, arg2 *client.ListServicesParams, arg3 ...client.RequestEditorFn) (*client.ListServicesResponse, error) {
	fake.listServicesWithResponseMutex.Lock()
	ret, specificReturn := fake.listServicesWithResponseReturnsOnCall[len(fake.listServicesWithResponseArgsForCall)]
	fake.listServicesWithResponseArgsForCall = append(fake.listServicesWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 *client.ListServicesParams
		arg3 []client.RequestEditorFn
	}{arg1, arg2, arg3})
	stub := fake.ListServicesWithResponseStub
	fakeReturns := fake.listServicesWithResponseReturns
	fake.recordInvocation("ListServicesWithResponse", []interface{}{arg1, arg2, arg3})
	fake.listServicesWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceRepoClient) ListServicesWithResponseCallCount() int {
	fake.listServicesWithResponseMutex.RLock()
	defer fake.listServicesWithResponseMutex.RUnlock()
	return len(fake.listServicesWithResponseArgsForCall)
}

func (fake *FakeServiceRepoClient) ListServicesWithResponseCalls(stub func(context.Context, *client.ListServicesParams, ...client.RequestEditorFn) (*client.ListServicesResponse, error)) {
	fake.listServicesWithResponseMutex.Lock()
	defer fake.listServicesWithResponseMutex.Unlock()
	fake.ListServicesWithResponseStub = stub
}

func (fake *FakeServiceRepoClient) ListServicesWithResponseArgsForCall(i int) (context.Context, *client.ListServicesParams, []client.RequestEditorFn) {
	fake.listServicesWithResponseMutex.RLock()
	defer fake.listServicesWithResponseMutex.RUnlock()
	argsForCall := fake.listServicesWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceRepoClient) ListServicesWithResponseReturns(result1 *client.ListServicesResponse, result2 error) {
	fake.listServicesWithResponseMutex.Lock()
	defer fake.listServicesWithResponseMutex.Unlock()
	fake.ListServicesWithResponseStub = nil
	fake.listServicesWithResponseReturns = struct {
		result1 *client.ListServicesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) ListServicesWithResponseReturnsOnCall(i int, result1 *client.ListServicesResponse, result2 error) {
	fake.listServicesWithResponseMutex.Lock()
	defer fake.listServicesWithResponseMutex.Unlock()
	fake.ListServicesWithResponseStub = nil
	if fake.listServicesWithResponseReturnsOnCall == nil {
		fake.listServicesWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.ListServicesResponse
			result2 error
		})
	}
	fake.listServicesWithResponseReturnsOnCall[i] = struct {
		result1 *client.ListServicesResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) RetrieveServiceWithResponse(arg1 context.Context, arg2 string, arg3 ...client.RequestEditorFn) (*client.RetrieveServiceResponse, error) {
	fake.retrieveServiceWithResponseMutex.Lock()
	ret, specificReturn := fake.retrieveServiceWithResponseReturnsOnCall[len(fake.retrieveServiceWithResponseArgsForCall)]
	fake.retrieveServiceWithResponseArgsForCall = append(fake.retrieveServiceWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []client.RequestEditorFn
	}{arg1, arg2, arg3})
	stub := fake.RetrieveServiceWithResponseStub
	fakeReturns := fake.retrieveServiceWithResponseReturns
	fake.recordInvocation("RetrieveServiceWithResponse", []interface{}{arg1, arg2, arg3})
	fake.retrieveServiceWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceRepoClient) RetrieveServiceWithResponseCallCount() int {
	fake.retrieveServiceWithResponseMutex.RLock()
	defer fake.retrieveServiceWithResponseMutex.RUnlock()
	return len(fake.retrieveServiceWithResponseArgsForCall)
}

func (fake *FakeServiceRepoClient) RetrieveServiceWithResponseCalls(stub func(context.Context, string, ...client.RequestEditorFn) (*client.RetrieveServiceResponse, error)) {
	fake.retrieveServiceWithResponseMutex.Lock()
	defer fake.retrieveServiceWithResponseMutex.Unlock()
	fake.RetrieveServiceWithResponseStub = stub
}

func (fake *FakeServiceRepoClient) RetrieveServiceWithResponseArgsForCall(i int) (context.Context, string, []client.RequestEditorFn) {
	fake.retrieveServiceWithResponseMutex.RLock()
	defer fake.retrieveServiceWithResponseMutex.RUnlock()
	argsForCall := fake.retrieveServiceWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeServiceRepoClient) RetrieveServiceWithResponseReturns(result1 *client.RetrieveServiceResponse, result2 error) {
	fake.retrieveServiceWithResponseMutex.Lock()
	defer fake.retrieveServiceWithResponseMutex.Unlock()
	fake.RetrieveServiceWithResponseStub = nil
	fake.retrieveServiceWithResponseReturns = struct {
		result1 *client.RetrieveServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) RetrieveServiceWithResponseReturnsOnCall(i int, result1 *client.RetrieveServiceResponse, result2 error) {
	fake.retrieveServiceWithResponseMutex.Lock()
	defer fake.retrieveServiceWithResponseMutex.Unlock()
	fake.RetrieveServiceWithResponseStub = nil
	if fake.retrieveServiceWithResponseReturnsOnCall == nil {
		fake.retrieveServiceWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.RetrieveServiceResponse
			result2 error
		})
	}
	fake.retrieveServiceWithResponseReturnsOnCall[i] = struct {
		result1 *client.RetrieveServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) UpdateEnvVarsForServiceWithResponse(arg1 context.Context, arg2 string, arg3 []client.EnvVarInput, arg4 ...client.RequestEditorFn) (*client.UpdateEnvVarsForServiceResponse, error) {
	var arg3Copy []client.EnvVarInput
	if arg3 != nil {
		arg3Copy = make([]client.EnvVarInput, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.updateEnvVarsForServiceWithResponseMutex.Lock()
	ret, specificReturn := fake.updateEnvVarsForServiceWithResponseReturnsOnCall[len(fake.updateEnvVarsForServiceWithResponseArgsForCall)]
	fake.updateEnvVarsForServiceWithResponseArgsForCall = append(fake.updateEnvVarsForServiceWithResponseArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []client.EnvVarInput
		arg4 []client.RequestEditorFn
	}{arg1, arg2, arg3Copy, arg4})
	stub := fake.UpdateEnvVarsForServiceWithResponseStub
	fakeReturns := fake.updateEnvVarsForServiceWithResponseReturns
	fake.recordInvocation("UpdateEnvVarsForServiceWithResponse", []interface{}{arg1, arg2, arg3Copy, arg4})
	fake.updateEnvVarsForServiceWithResponseMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeServiceRepoClient) UpdateEnvVarsForServiceWithResponseCallCount() int {
	fake.updateEnvVarsForServiceWithResponseMutex.RLock()
	defer fake.updateEnvVarsForServiceWithResponseMutex.RUnlock()
	return len(fake.updateEnvVarsForServiceWithResponseArgsForCall)
}

func (fake *FakeServiceRepoClient) UpdateEnvVarsForServiceWithResponseCalls(stub func(context.Context, string, []client.EnvVarInput, ...client.RequestEditorFn) (*client.UpdateEnvVarsForServiceResponse, error)) {
	fake.updateEnvVarsForServiceWithResponseMutex.Lock()
	defer fake.updateEnvVarsForServiceWithResponseMutex.Unlock()
	fake.UpdateEnvVarsForServiceWithResponseStub = stub
}

func (fake *FakeServiceRepoClient) UpdateEnvVarsForServiceWithResponseArgsForCall(i int) (context.Context, string, []client.EnvVarInput, []client.RequestEditorFn) {
	fake.updateEnvVarsForServiceWithResponseMutex.RLock()
	defer fake.updateEnvVarsForServiceWithResponseMutex.RUnlock()
	argsForCall := fake.updateEnvVarsForServiceWithResponseArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceRepoClient) UpdateEnvVarsForServiceWithResponseReturns(result1 *client.UpdateEnvVarsForServiceResponse, result2 error) {
	fake.updateEnvVarsForServiceWithResponseMutex.Lock()
	defer fake.updateEnvVarsForServiceWithResponseMutex.Unlock()
	fake.UpdateEnvVarsForServiceWithResponseStub = nil
	fake.updateEnvVarsForServiceWithResponseReturns = struct {
		result1 *client.UpdateEnvVarsForServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) UpdateEnvVarsForServiceWithResponseReturnsOnCall(i int, result1 *client.UpdateEnvVarsForServiceResponse, result2 error) {
	fake.updateEnvVarsForServiceWithResponseMutex.Lock()
	defer fake.updateEnvVarsForServiceWithResponseMutex.Unlock()
	fake.UpdateEnvVarsForServiceWithResponseStub = nil
	if fake.updateEnvVarsForServiceWithResponseReturnsOnCall == nil {
		fake.updateEnvVarsForServiceWithResponseReturnsOnCall = make(map[int]struct {
			result1 *client.UpdateEnvVarsForServiceResponse
			result2 error
		})
	}
	fake.updateEnvVarsForServiceWithResponseReturnsOnCall[i] = struct {
		result1 *client.UpdateEnvVarsForServiceResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeServiceRepoClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDeployWithResponseMutex.RLock()
	defer fake.createDeployWithResponseMutex.RUnlock()
	fake.createServiceWithResponseMutex.RLock()
	defer fake.createServiceWithResponseMutex.RUnlock()
	fake.getEnvVarsForServiceWithResponseMutex.RLock()
	defer fake.getEnvVarsForServiceWithResponseMutex.RUnlock()
	fake.listServicesWithResponseMutex.RLock()
	defer fake.listServicesWithResponseMutex.RUnlock()
	fake.retrieveServiceWithResponseMutex.RLock()
	defer fake.retrieveServiceWithResponseMutex.RUnlock()
	fake.updateEnvVarsForServiceWithResponseMutex.RLock()
	defer fake.updateEnvVarsForServiceWithResponseMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceRepoClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
